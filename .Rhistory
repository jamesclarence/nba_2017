east$op_pts <- as.numeric(east$op_pts)
# remove pts columns
east$pts <- NULL
east$pts <- NULL
# rename eastern conference to team
east <- rename(east, "team" = `eastern conference`)
# add column
# conference; add "east" to it
east$conf <- "east"
# season; add year 1977
east$ssn <- str_extract(url, "[[:digit:]]{4}")
# playoff; if team contains an *, y; if no *, n
east$playoff <- ifelse(grepl("\\*", east$team), "y", "n")
# remove asterisk
east$team <- str_replace_all(east$team, "\\*", "")
# conference rank from team column to separate column
east$conf_rank <- str_extract(east$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
east$conf_rank <- str_replace_all(east$conf_rank, "[[:punct:]]|[[:space:]]", "")
east$conf_rank <- as.integer(east$conf_rank)
# remove conference rank from team column
# east$team <- str_replace_all(east$team, "[[:punct:]]|[[:digit:]]", "") %>% str_trim
east$team <- str_replace_all(east$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
east <- mutate(east, pt_diff = tm_pts - op_pts)
east <- select(east, team, conf, w, l, tm_pts, op_pts, ssn, playoff, conf_rank, pt_diff)
}
lapply(url,clean_east_2016)
clean_east_2016
clean_east_2016()
clean_east_2016 <- function(i) {
url <- read_html(i)
# Get the standings table
east <- html_table(html_nodes(url, "table"))[[3]]
# lowercase column names
names(east) <- tolower(names(east))
# remove division rows
east <- east[-grep("Division", east$`eastern conference`),]
# rename column
# pts (column 6) to tm_pts
east$tm_pts <- east[,6]
# pts (column 7) to opp_pts
east$op_pts <- east[,7]
# convert tm_pts and op_pts to integers
east$tm_pts <- as.numeric(east$tm_pts)
east$op_pts <- as.numeric(east$op_pts)
# remove pts columns
east$pts <- NULL
east$pts <- NULL
# rename eastern conference to team
east <- rename(east, "team" = `eastern conference`)
# add column
# conference; add "east" to it
east$conf <- "east"
# season; add year 1977
east$ssn <- str_extract(i, "[[:digit:]]{4}")
# playoff; if team contains an *, y; if no *, n
east$playoff <- ifelse(grepl("\\*", east$team), "y", "n")
# remove asterisk
east$team <- str_replace_all(east$team, "\\*", "")
# conference rank from team column to separate column
east$conf_rank <- str_extract(east$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
east$conf_rank <- str_replace_all(east$conf_rank, "[[:punct:]]|[[:space:]]", "")
east$conf_rank <- as.integer(east$conf_rank)
# remove conference rank from team column
# east$team <- str_replace_all(east$team, "[[:punct:]]|[[:digit:]]", "") %>% str_trim
east$team <- str_replace_all(east$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
east <- mutate(east, pt_diff = tm_pts - op_pts)
east <- select(east, team, conf, w, l, tm_pts, op_pts, ssn, playoff, conf_rank, pt_diff)
}
clean_east_2016("http://www.basketball-reference.com/leagues/NBA_2016_standings.html")
plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_east_2016())
plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_east_2016)
clean_west_2016 <- function(i) {
url <- read_html(i)
# Get the standings table
west <- html_table(html_nodes(url, "table"))[[3]]
# lowercase column names
names(west) <- tolower(names(west))
# remove division rows
west <- west[-grep("Division", west$`western conference`),]
# rename column
# pts (column 6) to tm_pts
west$tm_pts <- west[,6]
# pts (column 7) to opp_pts
west$op_pts <- west[,7]
# convert tm_pts and op_pts to integers
west$tm_pts <- as.numeric(west$tm_pts)
west$op_pts <- as.numeric(west$op_pts)
# remove pts columns
west$pts <- NULL
west$pts <- NULL
# rename western conference to team
west <- rename(west, "team" = `western conference`)
# add column
# conference; add "west" to it
west$conf <- "west"
# season; add year 1977
west$ssn <- str_extract(i, "[[:digit:]]{4}")
# playoff; if team contains an *, y; if no *, n
west$playoff <- ifelse(grepl("\\*", west$team), "y", "n")
# remove asterisk
west$team <- str_replace_all(west$team, "\\*", "")
# conference rank from team column to separate column
west$conf_rank <- str_extract(west$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
west$conf_rank <- str_replace_all(west$conf_rank, "[[:punct:]]|[[:space:]]", "")
west$conf_rank <- as.integer(west$conf_rank)
# remove conference rank from team column
# west$team <- str_replace_all(west$team, "[[:punct:]]|[[:digit:]]", "") %>% str_trim
west$team <- str_replace_all(west$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
west <- mutate(west, pt_diff = tm_pts - op_pts)
west <- select(west, team, conf, w, l, tm_pts, op_pts, ssn, playoff, conf_rank, pt_diff)
}
plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_west_2016)
clean_west_2016 <- function(i) {
url <- read_html(i)
# Get the standings table
west <- html_table(html_nodes(url, "table"))[[4]]
# lowercase column names
names(west) <- tolower(names(west))
# remove division rows
west <- west[-grep("Division", west$`western conference`),]
# rename column
# pts (column 6) to tm_pts
west$tm_pts <- west[,6]
# pts (column 7) to opp_pts
west$op_pts <- west[,7]
# convert tm_pts and op_pts to integers
west$tm_pts <- as.numeric(west$tm_pts)
west$op_pts <- as.numeric(west$op_pts)
# remove pts columns
west$pts <- NULL
west$pts <- NULL
# rename western conference to team
west <- rename(west, "team" = `western conference`)
# add column
# conference; add "west" to it
west$conf <- "west"
# season; add year 1977
west$ssn <- str_extract(i, "[[:digit:]]{4}")
# playoff; if team contains an *, y; if no *, n
west$playoff <- ifelse(grepl("\\*", west$team), "y", "n")
# remove asterisk
west$team <- str_replace_all(west$team, "\\*", "")
# conference rank from team column to separate column
west$conf_rank <- str_extract(west$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
west$conf_rank <- str_replace_all(west$conf_rank, "[[:punct:]]|[[:space:]]", "")
west$conf_rank <- as.integer(west$conf_rank)
# remove conference rank from team column
# west$team <- str_replace_all(west$team, "[[:punct:]]|[[:digit:]]", "") %>% str_trim
west$team <- str_replace_all(west$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
west <- mutate(west, pt_diff = tm_pts - op_pts)
west <- select(west, team, conf, w, l, tm_pts, op_pts, ssn, playoff, conf_rank, pt_diff)
}
plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_west_2016)
e <- plyr::ldply(ssn_url_all, clean_east)
w <- plyr::ldply(ssn_url_all, clean_west)
e_16 <- plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_east_2016)
w_16 <- plyr::ldply("http://www.basketball-reference.com/leagues/NBA_2016_standings.html", clean_west_2016)
nba_standings_1977_2016 <- rbind(e, w, e_16, w_16)
View(nba_standings_1977_2016)
?write.csv
getwd()
setwd("C:/Users/fishe/Documents/")
getwd()
write.csv(nba_standings_1977_2016, "nba_standings_1977_2016.csv", row.names = F)
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank, color = variable)) +
geom_line()
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_line()
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_line() +
geom_white
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_line() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_line() +
scale_y_reverse() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_line() +
scale_y_reverse() +
scale_x_reverse() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = pt_diff, y = conf_rank)) +
geom_point() +
scale_y_reverse() +
scale_x_reverse() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = conf_rank, y = pt_diff)) +
geom_point() +
scale_y_reverse() +
scale_x_reverse() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = conf_rank, y = pt_diff)) +
geom_point() +
scale_y_reverse() +
scale_x_reverse() +
stat_smooth() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = conf_rank, y = pt_diff)) +
geom_point() +
scale_x_reverse() +
stat_smooth() +
theme_bw()
ggplot(nba_standings_1977_2016,aes(x = conf_rank, y = pt_diff)) +
geom_point() +
stat_smooth() +
theme_bw()
install.packages("installr")
library(installr)
updateR()
# load packages
library(rvest)
library(stringr)
library(jsonlite)
library(dplyr)
library(readr)
# Set working directory
setwd("C:/Users/fishe/Documents/nba_2017")
# Read in pt_diff probability
prob <- read_csv("probability.csv")
# Read in standings from Basketball Reference
url <- "http://www.basketball-reference.com/leagues/NBA_2016_standings.html"
url <- read_html(url)
# Clean Eastern Conference
# Get the standings table
east <- html_table(html_nodes(url, "table"))[[3]]
# lowercase column names
names(east) <- tolower(names(east))
# remove division rows
east <- east[-grep("Division", east$`eastern conference`),]
# convert tm_pts and op_pts to integers
east$tm_pts <- as.numeric(east$`ps/g`)
east$op_pts <- as.numeric(east$`pa/g`)
# remove pts columns
east$`ps/g` <- NULL
east$`pa/g` <- NULL
# rename eastern conference to team
east <- rename(east, "team" = `eastern conference`)
# add conference column; add "east" to it
east$conf <- "east"
# remove asterisk from team column
east$team <- str_replace_all(east$team, "\\*", "")
# conference rank from team column to separate column
east$conf_rank <- str_extract(east$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
east$conf_rank <- str_replace_all(east$conf_rank, "[[:punct:]]|[[:space:]]", "")
east$conf_rank <- as.integer(east$conf_rank)
# remove conference rank from team column
# east$team <- str_replace_all(east$team, "[[:punct:]]|[[:digit:]]", "") %>% str_trim
east$team <- str_replace_all(east$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
east <- mutate(east, pt_diff = tm_pts - op_pts)
# Clean Western Conference
# Get the standings table
west <- html_table(html_nodes(url, "table"))[[4]]
# lowercase column names
names(west) <- tolower(names(west))
# remove division rows
west <- west[-grep("Division", west$`western conference`),]
# convert tm_pts and op_pts to integers
west$tm_pts <- as.numeric(west$`ps/g`)
west$op_pts <- as.numeric(west$`pa/g`)
# remove pts columns
west$`ps/g` <- NULL
west$`pa/g` <- NULL
# rename western conference to team
west <- rename(west, "team" = `western conference`)
# add conference column; add "west" to it
west$conf <- "west"
# remove asterisk from team column
west$team <- str_replace_all(west$team, "\\*", "")
# conference rank from team column to separate column
west$conf_rank <- str_extract(west$team, "[[:space:]]\\([[:alnum:]]{1,}\\)[[:space:]]")
west$conf_rank <- str_replace_all(west$conf_rank, "[[:punct:]]|[[:space:]]", "")
west$conf_rank <- as.integer(west$conf_rank)
# remove conference rank from team column
west$team <- str_replace_all(west$team, "[[:punct:]][[:digit:]]{1,2}[[:punct:]]", "") %>% str_trim
# calculate point differential
west <- mutate(west, pt_diff = tm_pts - op_pts)
# Bind east and west conference; round pt_diff for matching
standings <- rbind(east, west) %>% arrange(conf, conf_rank) %>% select(-gb, -srs)
# Change columns to character for matching (floating point issue)
standings$pt_diff <- as.character(round(standings$pt_diff, 1))
prob$pt_seq <- as.character(round(prob$pt_seq, 1))
# Add in pt_diff probability
s <- standings %>% left_join(prob, by = c("pt_diff" = "pt_seq")) %>% filter(conf_rank.x == conf_rank.y) %>% select(-pop_mean, -pop_sd, -zscore)
View(s)
s <- standings %>%
left_join(prob, by = c("pt_diff" = "pt_seq")) %>%
filter(conf_rank.x == conf_rank.y) %>%
select(conf_rank.x, conf, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, prob, -pop_mean, -pop_sd, -zscore, -conf_rank.y, )
s <- standings %>%
left_join(prob, by = c("pt_diff" = "pt_seq")) %>%
filter(conf_rank.x == conf_rank.y) %>%
select(conf_rank.x, conf, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, prob, -pop_mean, -pop_sd, -zscore, -conf_rank.y)
toJSON(s, pretty = T)
rename(s, conf.rank.x = Rank)
rename(s, Rank = conf.rank.x)
rename(s, Rank = conf_rank.x)
mutate(s, prob = prob*100)
s
mutate(s, prob = round(prob*100, 1))
mutate(s, prob = round(prob*100, 1), prob_pct = paste(prob, "%"))
mutate(s, prob = round(prob*100, 1), prob_pct = paste0(prob, "%"))
mutate(s, prob = round(prob*100, 1), prob_pct = str_paste(prob, "%"))
mutate(s, prob = round(prob*100, 1), prob_pct = str_c(prob, "%"))
mutate(s, prob_pct = str_c(round(prob*100, 1), "%")) #, prob_pct = str_c(prob, "%"))
# Join point differential with probability
s <- standings %>%
left_join(prob, by = c("pt_diff" = "pt_seq")) %>%
filter(conf_rank.x == conf_rank.y)
s <- mutate(s, prob = str_c(round(prob*100, 1), "%")) %>%
select(conf_rank.x, conf, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, prob, -pop_mean, -pop_sd, -zscore, -conf_rank.y)
s <- mutate(s, prob = str_c(round(prob*100, 1), "%")) %>%
select(conf, conf_rank.x, prob, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, -pop_mean, -pop_sd, -zscore, -conf_rank.y)
s <- standings %>%
left_join(prob, by = c("pt_diff" = "pt_seq")) %>%
filter(conf_rank.x == conf_rank.y)
s <- mutate(s, prob = str_c(round(prob*100, 1), "%")) %>%
select(conf, conf_rank.x, prob, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, -pop_mean, -pop_sd, -zscore, -conf_rank.y)
rename(s, Rank = conf_rank.x,
Conf = conf,
W = w,
L = l,
PCT = `w/l%`,
PPG = tm_pts,
oPPG = op_pts,
Diff= pt_diff,
`Rank PCT` = prob)
s <- rename(s, Rank = conf_rank.x,
Conf = conf,
W = w,
L = l,
PCT = `w/l%`,
PPG = tm_pts,
oPPG = op_pts,
Diff= pt_diff,
`Rank PCT` = prob)
toJSON(s, pretty = T)
s <- rename(s,
Conf = conf,
Rank = conf_rank.x,
`Rank PCT` = prob,
team = Team,
W = w,
L = l,
PCT = `w/l%`,
PPG = tm_pts,
oPPG = op_pts,
Diff= pt_diff
)
s <- standings %>%
left_join(prob, by = c("pt_diff" = "pt_seq")) %>%
filter(conf_rank.x == conf_rank.y)
# Turn prob into percentage format and reformat data frame
s <- mutate(s, prob = str_c(round(prob*100, 1), "%")) %>%
select(conf, conf_rank.x, prob, team, w, l, `w/l%`, tm_pts, op_pts, pt_diff, -pop_mean, -pop_sd, -zscore, -conf_rank.y)
s <- rename(s,
Conf = conf,
Rank = conf_rank.x,
`Rank PCT` = prob,
team = Team,
W = w,
L = l,
PCT = `w/l%`,
PPG = tm_pts,
oPPG = op_pts,
Diff= pt_diff
)
# Rename columns
s <- rename(s,
Conf = conf,
Rank = conf_rank.x,
`Rank PCT` = prob,
Team = team,
W = w,
L = l,
PCT = `w/l%`,
PPG = tm_pts,
oPPG = op_pts,
Diff= pt_diff
)
toJSON(s)
toJSON(s, pretty = T)
?toJSON
cat(toJSON(s, pretty = T))
toJSON(s, pretty = T)
?cat
data <- toJSON(s, pretty = T)
data
write.table(data, "nba_json.json")
write.csv(data, "nba_json.json")
x <- read.csv("nba_standings_1977_2016.csv", stringsAsFactors = F)
y <- read.csv("probability.csv", stringsAsFactors = F)
x <- mutate(x, pt_diff = tm_pts - op_pts)
# density of x by conference rank
ggplot(x, aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
library(ggplot2)
# density of x by conference rank
ggplot(x, aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
View(x)
filter(x, conf_rank == 1) %>%
ggplot(x, aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
filter(x, conf_rank == 1) %>%
ggplot(aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
filter(x, conf_rank == 1, conf_rank == 2) %>%
ggplot(aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
filter(x, conf_rank == 1|conf_rank == 2) %>%
ggplot(aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
filter(x, conf_rank == 1|conf_rank == 2|conf_rank == 3) %>%
ggplot(aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
write(data, "data.JSON")
filter(x, conf_rank == 1|conf_rank == 2|conf_rank == 3) %>%
ggplot(aes(x = pt_diff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_poit()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + hline(0)
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + h_line(0)
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + geom_hline(0)
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + geom_hline(aes(y_intercept = 0))
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + geom_hline(aes(yintercept = 0))
ggplot(s, aes(x = Rank, y = as.factor(Diff))) + geom_point() + geom_hline(aes(yintercept = 0))
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(-15, 15) + geom_hline(aes(yintercept = 0))
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(-15, 15) + geom_vline(aes(yintercept = 0))
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(-15, 15) + geom_vline(aes(xintercept = 8))
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(-15, 15) + geom_vline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(-15, 15) + geom_hline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(limits(-15, 15)) + geom_vline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(limits = -15, 15) + geom_vline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(limits = -15, 15) + geom_hline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + scale_y_discrete(limits = -15:15) + geom_hline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = Diff)) + geom_point() + geom_hline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point() + geom_hline(aes(yintercept = 0)) + theme_bw()
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point() + geom_vline(aes(xintercept = 8)) + theme_bw()
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point() + geom_vline(aes(xintercept = 8)) + theme_bw() + geom_smooth(method=lm, se=F)
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point() + geom_vline(aes(xintercept = 8)) + theme_bw() + geom_smooth(method=lm)
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point(aes(size = Rank)) + geom_vline(aes(xintercept = 8)) + theme_bw() + geom_smooth(method=lm)
ggplot(s, aes(x = Rank, y = as.numeric(Diff))) + geom_point(aes(color = Conf)) + geom_vline(aes(xintercept = 8)) + theme_bw() + geom_smooth(method=lm)
ggplot(s, aes(x = Rank, y = as.numeric(PCT))) + geom_point(aes(color = Conf)) + geom_vline(aes(xintercept = 8)) + theme_bw() + geom_smooth(method=lm)
View(x)
x %>% filter(conf_rank == 1)
x %>% filter(conf_rank == 1:8)
x %>% filter(conf_rank == 1)
x %>% filter(conf_rank <= 8)
x %>% filter(playoff == y)
x %>% filter(playoff == 'y')
yes <- x %>% filter(playoff == 'y')
no <- x %>% filter(playoff == 'n')
# Calculate population sd and population mean for each conference rank
pop_sd_y <- sd(yes$pt_diff)*sqrt((length(yes$pt_diff)-1)/(length(yes$pt_diff)))
pop_mean_y <- mean(yes$pt_diff)
pop_sd_n <- sd(no$pt_diff)*sqrt((length(no$pt_diff)-1)/(length(no$pt_diff)))
pop_mean_n <- mean(no$pt_diff)
pt_seq <- seq(-15, 15, by = 0.1)
pt_seq <- as.data.frame(pt_seq)
# Create data frame for each playoff status
df_y <- cbind(rep("1", nrow(pt_seq)), pt_seq, rep(pop_mean_y, nrow(pt_seq)), rep(pop_sd_y, nrow(pt_seq)))
colnames(df1) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
df_n <- cbind(rep("2", nrow(pt_seq)), pt_seq, rep(pop_mean_n, nrow(pt_seq)), rep(pop_sd_n, nrow(pt_seq)))
colnames(df2) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
colnames(df_y) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
colnames(df_n) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
View(df_n)
df_y <- cbind(rep("y", nrow(pt_seq)), pt_seq, rep(pop_mean_y, nrow(pt_seq)), rep(pop_sd_y, nrow(pt_seq)))
colnames(df_y) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
df_n <- cbind(rep("n", nrow(pt_seq)), pt_seq, rep(pop_mean_n, nrow(pt_seq)), rep(pop_sd_n, nrow(pt_seq)))
colnames(df_n) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
df <- rbind(df_y, df_n)
df <- df %>% mutate(zscore = (pt_seq - pop_mean / pop_sd))
View(df)
df$prob <- pnorm(df$pt_seq, df$pop_mean, df$pop_sd)
rm(df)
rm(df_n)
df_y <- cbind(rep("y", nrow(pt_seq)), pt_seq, rep(pop_mean_y, nrow(pt_seq)), rep(pop_sd_y, nrow(pt_seq)))
colnames(df_y) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
View(df_y)
df_y <- df_y %>% mutate(zscore = (pt_seq - pop_mean / pop_sd))
df_y$prob <- pnorm(df$pt_seq, df$pop_mean, df$pop_sd)
df_y$prob_pct <- mutate(prob_pct = str_c(round(prob*100, 1), "%"))
df_y$prob <- pnorm(df$pt_seq, df$pop_mean, df$pop_sd)
df_y <- df_y %>% mutate(zscore = (pt_seq - pop_mean / pop_sd))
df_y$prob <- pnorm(df$pt_seq, df$pop_mean, df$pop_sd)
df_y$prob <- pnorm(df_y$pt_seq, df_y$pop_mean, df_y$pop_sd)
df_y$prob_pct <- mutate(prob_pct = str_c(round(prob*100, 1), "%"))
df_y$prob_pct <- mutate(df_y, prob_pct = str_c(round(prob*100, 1), "%"))
df_y <- cbind(rep("y", nrow(pt_seq)), pt_seq, rep(pop_mean_y, nrow(pt_seq)), rep(pop_sd_y, nrow(pt_seq)))
colnames(df_y) <- c("playoff", "pt_seq", "pop_mean", "pop_sd")
# Combine playoff status and add probabilities
df_y <- df_y %>% mutate(zscore = (pt_seq - pop_mean / pop_sd))
df_y$prob <- pnorm(df_y$pt_seq, df_y$pop_mean, df_y$pop_sd)
df_y <- df_y %>% mutate(prob_pct = str_c(round(prob*100, 1), "%"))
write.csv(df_y, "probability_playoff.csv", row.names = F)
y_pct <- read.csv("probability_playoff.csv", stringsAsFactors = F)
y_pct <- read.csv("data/probability_playoff.csv", stringsAsFactors = F)
ggplot(x, aes(x = playoff, fill = as.factor(conf_rank))) +
geom_density(alpha=0.25) + theme_bw()
ggplot(x,aes(x = playoff, y = pt_diff)) +
geom_point(aes(color = factor(playoff))) +
stat_smooth() +
theme_bw()
